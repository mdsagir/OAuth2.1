spring:
  application:
    name: gateway-service
  session:
    store-type: redis
    timeout: 10m
    redis:
      namespace: spring:cloud
  data:
    redis:
      url: redis://localhost:6379
      timeout: 5s
      username:
      password:
  cloud:
    gateway:
      httpclient:
        connect-timeout: 2000
        response-timeout: 5s
        pool:
          type: ELASTIC
          max-idle-time: 15s
          max-life-time: 60s
      default-filters:
        - name: SaveSession
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 200
              requestedTokens: 1
      routes:
        - id: user-service
          uri: http://localhost:8081/
          predicates:
            - Path=/user/**
          filters:
            - name: CircuitBreaker
              args:
                name: userCircuitBreaker
                fallbackUri: forward:/service-fallback
        - id: order-service
          uri: http://localhost:8082/
          predicates:
            - Path=/order/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
                fallbackUri: forward:/service-fallback
resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 20
        permittedNumberOfCallsInHalfOpenState: 5
        failureRateThreshold: 50
        waitDurationInOpenState: 15000
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s

logging:
  level:
    io.github.resilience4j: DEBUG