server:
  port: 9000
  netty:
    # Maximum time to wait for client to establish connection
    connection-timeout: 2s
    # Maximum time a connection can be idle before being closed
    idle-timeout: 15s
  # Enables graceful shutdown, waiting for active requests to complete
  shutdown: graceful
# Logging configuration section
logging:
  pattern:
    level: "%5p [${spring.application.name}]"
  # Log levels for different packages
  level:
    root: info
    org.example: debug
    io.github.resilience4j: debug
    org.springframework.security: info
spring:
  application:
    name: edge-service
  lifecycle:
    # Maximum time allowed for each phase during graceful shutdown
    timeout-per-shutdown-phase: 15s

  cloud:
    gateway:
      httpclient:
        # Maximum time to establish connection with downstream services
        connect-timeout: 2000
        # Maximum time to wait for response from downstream services
        response-timeout: 5s
        pool:
          # Connection pool type (fixed or elastic)
          type: elastic
          # Maximum time a connection can remain idle in the pool
          max-idle-time: 15s
          # Maximum lifetime of a connection in the pool
          max-life-time: 60s
      routes:
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
          predicates:
            - Path=/books/**
          filters:
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
                fallbackUri: forward:/order-fallback
        - id: spa-route
          uri: http://localhost:4200
          predicates:
            - Path=/,/*.css,/*.js,/favicon.ico
      default-filters:
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedTokens: 1
        - name: SaveSession
        - name: TokenRelay
  security:
    oauth2:
      client:
        registration:
          keycloak:
            client-id: demo-client
            client-secret: 9yF32SliT8OpmhBqLM1yIwTJ8qeC0PMZ
            scope:
              - openid
              - roles
        provider:
          keycloak:
            issuer-uri: http://localhost:8080/realms/demo
  data:
    redis:
      connect-timeout: 2s
      host: localhost
      port: 6379
      timeout: 1s
  session:
    timeout: 10m
    redis:
      namespace: alpha:edge
resilience4j:
  circuitbreaker:
    configs:
      default:
        # Number of calls considered for failure rate calculation
        slidingWindowSize: 20
        # Number of permitted calls when circuit is half-open
        permittedNumberOfCallsInHalfOpenState: 5
        # Percentage of failures required to open circuit
        failureRateThreshold: 50
        # Time circuit stays open before switching to half-open
        waitDurationInOpenState: 15000
  # Configuration for timeout handling
  timelimiter:
    configs:
      default:
        # Maximum duration allowed for downstream service calls
        timeoutDuration: 5s






